package com.cheng.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cheng.content.v2ex.V2exEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "V2EX_ENTITY".
*/
public class V2exEntityDao extends AbstractDao<V2exEntity, Long> {

    public static final String TABLENAME = "V2EX_ENTITY";

    /**
     * Properties of entity V2exEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Vid = new Property(0, Long.class, "vid", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Content_rendered = new Property(5, String.class, "content_rendered", false, "CONTENT_RENDERED");
        public final static Property Replies = new Property(6, int.class, "replies", false, "REPLIES");
        public final static Property UserId = new Property(7, long.class, "userId", false, "USER_ID");
        public final static Property Username = new Property(8, String.class, "username", false, "USERNAME");
        public final static Property Tagline = new Property(9, String.class, "tagline", false, "TAGLINE");
        public final static Property Avatar_mini = new Property(10, String.class, "avatar_mini", false, "AVATAR_MINI");
        public final static Property Avatar_normal = new Property(11, String.class, "avatar_normal", false, "AVATAR_NORMAL");
        public final static Property Avatar_large = new Property(12, String.class, "avatar_large", false, "AVATAR_LARGE");
        public final static Property Node_id = new Property(13, String.class, "node_id", false, "NODE_ID");
        public final static Property Node_name = new Property(14, String.class, "node_name", false, "NODE_NAME");
        public final static Property Node_title_alternative = new Property(15, String.class, "node_title_alternative", false, "NODE_TITLE_ALTERNATIVE");
        public final static Property Node_url = new Property(16, String.class, "node_url", false, "NODE_URL");
        public final static Property Node_topics = new Property(17, String.class, "node_topics", false, "NODE_TOPICS");
        public final static Property Node_avatar_mini = new Property(18, String.class, "node_avatar_mini", false, "NODE_AVATAR_MINI");
        public final static Property Node_avatar_normal = new Property(19, String.class, "node_avatar_normal", false, "NODE_AVATAR_NORMAL");
        public final static Property Node_avatar_large = new Property(20, String.class, "node_avatar_large", false, "NODE_AVATAR_LARGE");
        public final static Property Created = new Property(21, long.class, "created", false, "CREATED");
        public final static Property Last_modified = new Property(22, long.class, "last_modified", false, "LAST_MODIFIED");
        public final static Property Last_touched = new Property(23, long.class, "last_touched", false, "LAST_TOUCHED");
        public final static Property Node_type = new Property(24, int.class, "node_type", false, "NODE_TYPE");
    }


    public V2exEntityDao(DaoConfig config) {
        super(config);
    }
    
    public V2exEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"V2EX_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: vid
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TITLE\" TEXT," + // 2: title
                "\"URL\" TEXT," + // 3: url
                "\"CONTENT\" TEXT," + // 4: content
                "\"CONTENT_RENDERED\" TEXT," + // 5: content_rendered
                "\"REPLIES\" INTEGER NOT NULL ," + // 6: replies
                "\"USER_ID\" INTEGER NOT NULL ," + // 7: userId
                "\"USERNAME\" TEXT," + // 8: username
                "\"TAGLINE\" TEXT," + // 9: tagline
                "\"AVATAR_MINI\" TEXT," + // 10: avatar_mini
                "\"AVATAR_NORMAL\" TEXT," + // 11: avatar_normal
                "\"AVATAR_LARGE\" TEXT," + // 12: avatar_large
                "\"NODE_ID\" TEXT," + // 13: node_id
                "\"NODE_NAME\" TEXT," + // 14: node_name
                "\"NODE_TITLE_ALTERNATIVE\" TEXT," + // 15: node_title_alternative
                "\"NODE_URL\" TEXT," + // 16: node_url
                "\"NODE_TOPICS\" TEXT," + // 17: node_topics
                "\"NODE_AVATAR_MINI\" TEXT," + // 18: node_avatar_mini
                "\"NODE_AVATAR_NORMAL\" TEXT," + // 19: node_avatar_normal
                "\"NODE_AVATAR_LARGE\" TEXT," + // 20: node_avatar_large
                "\"CREATED\" INTEGER NOT NULL ," + // 21: created
                "\"LAST_MODIFIED\" INTEGER NOT NULL ," + // 22: last_modified
                "\"LAST_TOUCHED\" INTEGER NOT NULL ," + // 23: last_touched
                "\"NODE_TYPE\" INTEGER NOT NULL );"); // 24: node_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"V2EX_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, V2exEntity entity) {
        stmt.clearBindings();
 
        Long vid = entity.getVid();
        if (vid != null) {
            stmt.bindLong(1, vid);
        }
        stmt.bindLong(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String content_rendered = entity.getContent_rendered();
        if (content_rendered != null) {
            stmt.bindString(6, content_rendered);
        }
        stmt.bindLong(7, entity.getReplies());
        stmt.bindLong(8, entity.getUserId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(9, username);
        }
 
        String tagline = entity.getTagline();
        if (tagline != null) {
            stmt.bindString(10, tagline);
        }
 
        String avatar_mini = entity.getAvatar_mini();
        if (avatar_mini != null) {
            stmt.bindString(11, avatar_mini);
        }
 
        String avatar_normal = entity.getAvatar_normal();
        if (avatar_normal != null) {
            stmt.bindString(12, avatar_normal);
        }
 
        String avatar_large = entity.getAvatar_large();
        if (avatar_large != null) {
            stmt.bindString(13, avatar_large);
        }
 
        String node_id = entity.getNode_id();
        if (node_id != null) {
            stmt.bindString(14, node_id);
        }
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(15, node_name);
        }
 
        String node_title_alternative = entity.getNode_title_alternative();
        if (node_title_alternative != null) {
            stmt.bindString(16, node_title_alternative);
        }
 
        String node_url = entity.getNode_url();
        if (node_url != null) {
            stmt.bindString(17, node_url);
        }
 
        String node_topics = entity.getNode_topics();
        if (node_topics != null) {
            stmt.bindString(18, node_topics);
        }
 
        String node_avatar_mini = entity.getNode_avatar_mini();
        if (node_avatar_mini != null) {
            stmt.bindString(19, node_avatar_mini);
        }
 
        String node_avatar_normal = entity.getNode_avatar_normal();
        if (node_avatar_normal != null) {
            stmt.bindString(20, node_avatar_normal);
        }
 
        String node_avatar_large = entity.getNode_avatar_large();
        if (node_avatar_large != null) {
            stmt.bindString(21, node_avatar_large);
        }
        stmt.bindLong(22, entity.getCreated());
        stmt.bindLong(23, entity.getLast_modified());
        stmt.bindLong(24, entity.getLast_touched());
        stmt.bindLong(25, entity.getNode_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, V2exEntity entity) {
        stmt.clearBindings();
 
        Long vid = entity.getVid();
        if (vid != null) {
            stmt.bindLong(1, vid);
        }
        stmt.bindLong(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String content_rendered = entity.getContent_rendered();
        if (content_rendered != null) {
            stmt.bindString(6, content_rendered);
        }
        stmt.bindLong(7, entity.getReplies());
        stmt.bindLong(8, entity.getUserId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(9, username);
        }
 
        String tagline = entity.getTagline();
        if (tagline != null) {
            stmt.bindString(10, tagline);
        }
 
        String avatar_mini = entity.getAvatar_mini();
        if (avatar_mini != null) {
            stmt.bindString(11, avatar_mini);
        }
 
        String avatar_normal = entity.getAvatar_normal();
        if (avatar_normal != null) {
            stmt.bindString(12, avatar_normal);
        }
 
        String avatar_large = entity.getAvatar_large();
        if (avatar_large != null) {
            stmt.bindString(13, avatar_large);
        }
 
        String node_id = entity.getNode_id();
        if (node_id != null) {
            stmt.bindString(14, node_id);
        }
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(15, node_name);
        }
 
        String node_title_alternative = entity.getNode_title_alternative();
        if (node_title_alternative != null) {
            stmt.bindString(16, node_title_alternative);
        }
 
        String node_url = entity.getNode_url();
        if (node_url != null) {
            stmt.bindString(17, node_url);
        }
 
        String node_topics = entity.getNode_topics();
        if (node_topics != null) {
            stmt.bindString(18, node_topics);
        }
 
        String node_avatar_mini = entity.getNode_avatar_mini();
        if (node_avatar_mini != null) {
            stmt.bindString(19, node_avatar_mini);
        }
 
        String node_avatar_normal = entity.getNode_avatar_normal();
        if (node_avatar_normal != null) {
            stmt.bindString(20, node_avatar_normal);
        }
 
        String node_avatar_large = entity.getNode_avatar_large();
        if (node_avatar_large != null) {
            stmt.bindString(21, node_avatar_large);
        }
        stmt.bindLong(22, entity.getCreated());
        stmt.bindLong(23, entity.getLast_modified());
        stmt.bindLong(24, entity.getLast_touched());
        stmt.bindLong(25, entity.getNode_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public V2exEntity readEntity(Cursor cursor, int offset) {
        V2exEntity entity = new V2exEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // vid
            cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content_rendered
            cursor.getInt(offset + 6), // replies
            cursor.getLong(offset + 7), // userId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // username
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tagline
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // avatar_mini
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // avatar_normal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // avatar_large
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // node_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // node_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // node_title_alternative
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // node_url
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // node_topics
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // node_avatar_mini
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // node_avatar_normal
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // node_avatar_large
            cursor.getLong(offset + 21), // created
            cursor.getLong(offset + 22), // last_modified
            cursor.getLong(offset + 23), // last_touched
            cursor.getInt(offset + 24) // node_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, V2exEntity entity, int offset) {
        entity.setVid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent_rendered(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReplies(cursor.getInt(offset + 6));
        entity.setUserId(cursor.getLong(offset + 7));
        entity.setUsername(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTagline(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAvatar_mini(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAvatar_normal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAvatar_large(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNode_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNode_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNode_title_alternative(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNode_url(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNode_topics(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNode_avatar_mini(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNode_avatar_normal(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNode_avatar_large(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreated(cursor.getLong(offset + 21));
        entity.setLast_modified(cursor.getLong(offset + 22));
        entity.setLast_touched(cursor.getLong(offset + 23));
        entity.setNode_type(cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(V2exEntity entity, long rowId) {
        entity.setVid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(V2exEntity entity) {
        if(entity != null) {
            return entity.getVid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(V2exEntity entity) {
        return entity.getVid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
